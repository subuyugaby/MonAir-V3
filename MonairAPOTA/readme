# üå¨Ô∏è MonAir ESP32 - Monitor Ambiental con MQTT y OTA

Este proyecto implementa un **monitor ambiental IoT** basado en ESP32, capaz de medir m√∫ltiples variables del aire como temperatura, humedad, presi√≥n, calidad del aire, concentraci√≥n de part√≠culas, entre otros. Se conecta v√≠a WiFi, env√≠a datos mediante **MQTT**, y permite actualizaciones inal√°mbricas por **OTA (Over-The-Air)**.

## üöÄ Caracter√≠sticas principales

- Conexi√≥n simult√°nea en modo **AP + STA**
- Publicaci√≥n de datos cada 10 minutos v√≠a **MQTT**
- Sensores soportados:
  - **BME680** (IAQ, CO2, VOC, temperatura, humedad, presi√≥n)
  - **DS18B20** (Temperatura externa)
  - **PM2.5** (Adafruit PM2.5 Air Quality Sensor)
- Indicadores RGB v√≠a **NeoPixel**
- Sincronizaci√≥n horaria v√≠a **NTP**
- Soporte completo para **OTA updates**
- Reinicio autom√°tico cada 23 horas

## üõ†Ô∏è Requisitos de hardware

- ESP32
- BME680 (via I2C)
- Sensor PM2.5 (Adafruit PM2.5 AQI Sensor)
- Sensor de temperatura DS18B20 (1-Wire)
- Anillo o tira **NeoPixel** (16 LEDs)
- Conexi√≥n WiFi

## üß∞ Librer√≠as utilizadas

Aseg√∫rate de tener instaladas estas librer√≠as en el IDE de Arduino:

- `WiFi.h`
- `PubSubClient.h`
- `Wire.h`
- `bsec.h` (BME680 BSEC Library)
- `NTPClient.h`
- `WiFiUdp.h`
- `Adafruit_NeoPixel.h`
- `OneWire.h`
- `DallasTemperature.h`
- `Adafruit_PM25AQI.h`
- `ArduinoOTA.h`

## üì° Configuraci√≥n WiFi y MQTT

Modifica las siguientes variables en el c√≥digo:

```cpp
// WiFi
const char* ssid_sta = "NOMBRE_DE_TU_RED";
const char* password_sta = "CONTRASE√ëA";

// OTA
const char* ota_password = "tu_password_ota";

// Access Point (modo AP)
const char *ap_ssid = "MonAirPrueba";
const char *ap_password = "12345678";

// MQTT
const char *mqtt_server = "test.mosquitto.org"; // O tu broker privado
const char *clientID = "airmonq_XXXXXX";        // Debe ser √∫nico por dispositivo

**Los datos se publican en el topic base airmon/<ID>/, donde <ID> es el identificador del dispositivo. Por ejemplo:**

swift
Copiar
Editar
airmon/006570A0/temp
airmon/006570A0/hume
airmon/006570A0/pres
airmon/006570A0/aqi
airmon/006570A0/CO2e
airmon/006570A0/pm25
airmon/006570A0/pm10
...

‚ú® Indicadores con NeoPixel
Color	Significado
üî¥ Rojo	WiFi desconectado
üü° Amarillo	Reconectando MQTT
üü¢ Verde	MQTT conectado exitosamente
üîµ Azul	Publicaci√≥n exitosa de datos

‚ôªÔ∏è Ciclos autom√°ticos
Los datos se publican cada 10 minutos

El dispositivo reinicia autom√°ticamente cada 23 horas

üîß OTA (Actualizaci√≥n remota)
Este firmware permite actualizaciones OTA a trav√©s del puerto mDNS esp32-dual.local. Puedes usar la opci√≥n "OTA" desde el IDE de Arduino para cargar nuevas versiones del c√≥digo sin necesidad de cable USB.

üì∏ Vista general de funcionamiento
Se conecta a red WiFi conocida.

Crea un punto de acceso propio (modo AP) para diagn√≥stico.

Inicializa sensores BME680, DS18B20, y PM2.5.

Se sincroniza con NTP.

Env√≠a datos por MQTT peri√≥dicamente.

Muestra estados del sistema por LED NeoPixel.

Permite actualizaciones OTA.
